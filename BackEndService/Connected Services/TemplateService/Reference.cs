//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BackEndService.TemplateService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemplateDC", Namespace="http://schemas.datacontract.org/2004/07/TemplateService.DataContracts")]
    [System.SerializableAttribute()]
    internal partial class TemplateDC : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextSampleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string TextSample {
            get {
                return this.TextSampleField;
            }
            set {
                if ((object.ReferenceEquals(this.TextSampleField, value) != true)) {
                    this.TextSampleField = value;
                    this.RaisePropertyChanged("TextSample");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TemplateService.ITemplateService")]
    internal interface ITemplateService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateService/addTemplate", ReplyAction="http://tempuri.org/ITemplateService/addTemplateResponse")]
        BackEndService.TemplateService.TemplateDC addTemplate(string Name, string textSample, string[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateService/addTemplate", ReplyAction="http://tempuri.org/ITemplateService/addTemplateResponse")]
        System.Threading.Tasks.Task<BackEndService.TemplateService.TemplateDC> addTemplateAsync(string Name, string textSample, string[] values);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateService/removeTemplate", ReplyAction="http://tempuri.org/ITemplateService/removeTemplateResponse")]
        bool removeTemplate(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateService/removeTemplate", ReplyAction="http://tempuri.org/ITemplateService/removeTemplateResponse")]
        System.Threading.Tasks.Task<bool> removeTemplateAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateService/getTemplate", ReplyAction="http://tempuri.org/ITemplateService/getTemplateResponse")]
        BackEndService.TemplateService.TemplateDC getTemplate(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateService/getTemplate", ReplyAction="http://tempuri.org/ITemplateService/getTemplateResponse")]
        System.Threading.Tasks.Task<BackEndService.TemplateService.TemplateDC> getTemplateAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateService/GenerateSeedData", ReplyAction="http://tempuri.org/ITemplateService/GenerateSeedDataResponse")]
        void GenerateSeedData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITemplateService/GenerateSeedData", ReplyAction="http://tempuri.org/ITemplateService/GenerateSeedDataResponse")]
        System.Threading.Tasks.Task GenerateSeedDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface ITemplateServiceChannel : BackEndService.TemplateService.ITemplateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class TemplateServiceClient : System.ServiceModel.ClientBase<BackEndService.TemplateService.ITemplateService>, BackEndService.TemplateService.ITemplateService {
        
        public TemplateServiceClient() {
        }
        
        public TemplateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TemplateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemplateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TemplateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BackEndService.TemplateService.TemplateDC addTemplate(string Name, string textSample, string[] values) {
            return base.Channel.addTemplate(Name, textSample, values);
        }
        
        public System.Threading.Tasks.Task<BackEndService.TemplateService.TemplateDC> addTemplateAsync(string Name, string textSample, string[] values) {
            return base.Channel.addTemplateAsync(Name, textSample, values);
        }
        
        public bool removeTemplate(string name) {
            return base.Channel.removeTemplate(name);
        }
        
        public System.Threading.Tasks.Task<bool> removeTemplateAsync(string name) {
            return base.Channel.removeTemplateAsync(name);
        }
        
        public BackEndService.TemplateService.TemplateDC getTemplate(string name) {
            return base.Channel.getTemplate(name);
        }
        
        public System.Threading.Tasks.Task<BackEndService.TemplateService.TemplateDC> getTemplateAsync(string name) {
            return base.Channel.getTemplateAsync(name);
        }
        
        public void GenerateSeedData() {
            base.Channel.GenerateSeedData();
        }
        
        public System.Threading.Tasks.Task GenerateSeedDataAsync() {
            return base.Channel.GenerateSeedDataAsync();
        }
    }
}
